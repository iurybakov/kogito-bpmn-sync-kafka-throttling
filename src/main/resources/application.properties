# Packaging
# quarkus.package.type=fast-jar

# Disable dev services
quarkus.devservices.enabled=false

quarkus.swagger-ui.always-include=true

# Maximum Java heap to be used during the native image generation
quarkus.native.native-image-xmx=4g
quarkus.log.level=INFO

kafka.bootstrap.servers=kafka:9092
#kafka.bootstrap.servers=kogito-kafka-kafka-bootstrap.kogito-operator-system.svc:9092
quarkus.class-loading.reloadable-artifacts=org.apache.kafka:kafka-clients:org.apache.kafka.common.serialization.Deserializer.class

## metadata

#mp.messaging.outgoing.kogito-processinstances-events.bootstrap.servers=kafka:9092
mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=kogito-processinstances-events
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.incoming.restmeta.connector=smallrye-kafka
mp.messaging.incoming.restmeta.topic=restmeta
mp.messaging.incoming.restmeta.group.id=kogito-restmeta
mp.messaging.incoming.restmeta.max.poll.records=10
mp.messaging.incoming.restmeta.max-queue-size-factor=2
mp.messaging.incoming.restmeta.pause-if-no-request=false
# can be approximately calculated: worst time of process work unit execution * ( kogito.quarkus.events.threads.queueSize + kogito.quarkus.events.threads.numThreads )
mp.messaging.incoming.restmeta.throttled.unprocessed-record-max-age.ms=900000

mp.messaging.incoming.restmeta.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.restmeta.auto.offset.reset=earliest

#mp.messaging.outgoing.kogito-variables-events.bootstrap.servers=kafka:9092
mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=kogito-variables-events
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

kogito.quarkus.events.threads.queueSize=50







