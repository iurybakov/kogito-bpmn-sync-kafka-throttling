version: '2.1'

services:

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command:
      [
        "sh",
        "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
      ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"
    networks:
      - kogito-network

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command:
      [
        "sh",
        "-c",
        "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
      ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"
    networks:
      - kogito-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8081:8080
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - kogito-network

  api-mock-rest:
    container_name: api-mock-rest
    image: dzo.sw.sbc.space/sbt_dev/ci90000011_bpmx_dev/apisprout/apisprout-await-aware:1.0
    mem_limit: 50m
    ports:
      - 8000:8000
    volumes:
      - ../../stub/apis:/apis:z
    command: /apis/rest.yaml
    networks:
      - kogito-network

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-postgresql:${KOGITO_VERSION}
    ports:
      - "8180:8080"
    depends_on:
      kafka:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_DB-KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: data_index
      QUARKUS_DATASOURCE_PASSWORD: data_index
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgresql:5432/kogito
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/
    networks:
      - kogito-network

  management-console:
    container_name: management-console
    image: quay.io/kiegroup/kogito-management-console:${KOGITO_VERSION}
    ports:
      - 8280:8080
    depends_on:
      data-index:
        condition: service_started
      keycloak:
        condition: service_healthy
    volumes:
      - ./svg/:/home/kogito/data/svg/:z
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST}:8180/graphql
      KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://${DOCKER_GATEWAY_HOST}:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://${DOCKER_GATEWAY_HOST}:8480/auth/realms/kogito/.well-known/openid-configuration -Dkogito.svg.folder.path=/home/kogito/data/svg
    networks:
      - kogito-network

  postgresql:
    container_name: postgresql
    image: postgres:14.2-alpine
    restart: always
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: kogito
      POSTGRES_PASSWORD: kogito
      POSTGRES_DB: kogito
    volumes:
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kogito-network

  keycloak:
    container_name: keycloak
    image: jboss/keycloak
    ports:
      - "8480:8080"
    volumes:
      - ./keycloak/kogito-realm.json:/tmp/kogito-realm.json
    healthcheck:
      test:
        [
            "CMD",
            "curl",
            "-f",
            "http://localhost:8080/auth/realms/kogito"
        ]
      interval: 1s
      timeout: 30s
      retries: 100
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
    networks:
      - kogito-network

networks:
  kogito-network:
    driver: bridge
    name: kogito-network
